pipeline {
    agent any

    environment {
        GITHUB_CREDENTIALS = credentials('github-jenkins-token')
        SERVER_CREDENTIALS = credentials('linux-server-credentials')
        IMAGE_NAME = "monitoring-logs"  // Image name for Docker
    }

    stages {
        stage('Clone Git Repository') {
            steps {
                echo 'Cloning the Git repository containing Monitoring-logs.py'
                git credentialsId: "${GITHUB_CREDENTIALS}", url: 'https://github.com/MajdHHH/Monitoring-logs.git', branch: 'main'
            }
        }

        stage('Verify Docker Installation on Target VM') {
            steps {
                echo 'Verifying Docker installation on the target VM'
                withCredentials([usernamePassword(credentialsId: 'linux-server-credentials', usernameVariable: 'SSH_USER', passwordVariable: 'SSH_PASS')]) {
                    sh '''
                    sshpass -p "${SSH_PASS}" ssh -o StrictHostKeyChecking=no ${SSH_USER}@192.168.1.134 "docker --version"
                    '''
                }
            }
        }

        stage('Build Docker Image on Target VM') {
            steps {
                echo 'Building the Docker image on the target VM'
                withCredentials([usernamePassword(credentialsId: 'linux-server-credentials', usernameVariable: 'SSH_USER', passwordVariable: 'SSH_PASS')]) {
                    sh '''
                    sshpass -p "${SSH_PASS}" ssh -o StrictHostKeyChecking=no ${SSH_USER}@192.168.1.134 "
                        cd /home/majd/Monitoring && \
                        docker build -t ${IMAGE_NAME} .
                    "
                    '''
                }
            }
        }

        stage('Run Docker Container on Target VM') {
            steps {
                echo 'Running the Docker container on the target VM'
                withCredentials([usernamePassword(credentialsId: 'linux-server-credentials', usernameVariable: 'SSH_USER', passwordVariable: 'SSH_PASS')]) {
                    sh '''
                    sshpass -p "${SSH_PASS}" ssh -o StrictHostKeyChecking=no ${SSH_USER}@192.168.1.134 "
                        docker run -d --name monitoring-logs-container ${IMAGE_NAME}
                    "
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                cleanWs()
            }
        }
    }
}
